glGenBuffers : Cette fonction génère des identifiants de buffer. 
Vous lui donnez le nombre de buffers que vous voulez générer et un tableau pour stocker
les identifiants générés. Dans votre cas, vous voulez générer un seul buffer,
donc vous passez 1 comme premier argument et l'adresse de votre variable vertexVBO comme deuxième argument.

glBindBuffer : Cette fonction lie un buffer à un point de liaison spécifique.
Le premier argument est le point de liaison (dans votre cas,
GL_ARRAY_BUFFER pour un buffer de données de vertex), et le deuxième argument
est l'identifiant du buffer à lier. Une fois qu'un buffer est lié à un point de liaison,
vous pouvez effectuer des opérations sur ce buffer en utilisant le point de liaison.

glBufferData : Cette fonction crée un nouveau bloc de données pour le buffer
lié au point de liaison spécifié et y copie les données. Le premier argument est le point de liaison,
le deuxième argument est la taille des données en octets, le troisième argument est un pointeur
vers les données, et le dernier argument est une indication de la façon dont vous prévoyez d'utiliser les données.
GL_STATIC_DRAW signifie que vous ne prévoyez pas de modifier les données et que vous les utiliserez de nombreuses
fois pour le dessin.

glVertexAttribPointer : Cette fonction spécifie comment les données de vertex sont
disposées dans le buffer. Le premier argument est l'index de l'attribut de vertex à configurer,
le deuxième argument est le nombre de composants par vertex (dans votre cas, 3 pour x, y, z),
le troisième argument est le type de données (dans votre cas, GL_FLOAT), le quatrième argument
indique si les données doivent être normalisées, le cinquième argument est le "stride" 
(l'espace entre les vertices consécutifs dans les données), et le dernier argument est 
un décalage dans le buffer où commencent les données de l'attribut.

https://learnopengl.com/Getting-started/Hello-Triangle

Ces fonctions sont toutes utilisées pour configurer vos données de vertex pour le rendu avec OpenGL.